/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@suptxt/quickset@0.4.6/dist/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class t{constructor({mode:t="minsum",clip:i=0,span:s=512,slot:e=0,high:h=128,freq:r=1,fifo:n=!1}={}){if(s>268435456)throw Error("Expected integer beyond memory range");if(h>4294967295)throw Error("Expected count beyond frequency range");if(e>64)throw Error("Rank slots exceed recommended length");s<e&&(e=s),n&&Object.defineProperties(this,{minsum:{value:this.$minsum,enumerable:!1,configurable:!1},winsum:{value:this.$winsum,enumerable:!1,configurable:!1}});let[l,a]=this.expects(s-1),o=2**(8*a)-0,[u,f]=this.expects(h-1),m=2**(8*f)-1;const c=new ArrayBuffer(f*(s+1));this.constructor.prototype.default={Rank:l,Pool:u,mode:t,fifo:n,mult:a,byte:f},this.constructor.prototype.sum=this[t],this.rank=new l(e),this.stat=new u(e),this.bits=new u(c),Object.defineProperties(this,{bits:{writable:!1,enumerable:!1,configurable:!1},prev:{writable:!0,enumerable:!1,configurable:!1},$minsum:{writable:!1,enumerable:!1,configurable:!1},$winsum:{writable:!1,enumerable:!1,configurable:!1}}),Object.defineProperties(this.constructor.prototype,{$minsum:{writable:!1,enumerable:!1,configurable:!1},$winsum:{writable:!1,enumerable:!1,configurable:!1}}),this.span=s=Math.min(s,o),this.clip=i=Math.max(i,0),this.high=h=Math.min(h,m),this.freq=r=Math.max(r,0),this.slot=e,this.last=e-1,this.tmin=r,this.tmax=0,this.prev=-1}$minsum(t,i=1){let s=this.invalid;if(t<this.clip||t>this.span||s(t)||s(i))return;if((i=(a=this.bits[t])+i)>this.high)return;this.bits[t]=i;let e=this.rank,h=this.stat;if(i>=this.tmin&&i>this.freq){let s=this.slot,u=this.last;for(var r=0;r<s&&e[r]!=t;++r)if(r==u){r=-1;break}if(r>=0)h[r]=i;else{for(var n,l=this.tmin,a=this.prev+1,o=0;o<s;++o)if(h[n=(o+a)%s]<=l){this.prev=o=n;break}e[o]=t,h[o]=i,this.tmin=this.lowest(h)}i>this.tmax&&(this.tmax=i)}}$winsum(t,i=1){let s=this.invalid;if(t<this.clip||t>this.span||s(t)||s(i))return;if((i=this.bits[t]+i)>this.high)return;this.bits[t]=i;let e=this.rank,h=this.stat;if(i>=this.tmin&&i>this.freq){for(var r,n,l=this.slot,a=0;a<l&&!(r>=0&&n>=0);++a)null==r&&e[a]==t&&(r=a),null==n&&h[a]<=i&&(n=a);if(null==n)return;if(r>=0){if(n>r)return;e.copyWithin(n+1,n,r),h.copyWithin(n+1,n,r),e[n]=t,h[n]=i}else e.copyWithin(n+1,n),h.copyWithin(n+1,n),e[n]=t,h[n]=i,this.tmin=h[this.last]??0;this.tmax=h[0]??0}}minsum(t,i=1){let s=this.invalid;if(t<this.clip||t>this.span||s(t)||s(i))return;if((i=this.bits[t]+i)>this.high)return;this.bits[t]=i;let e=this.rank,h=this.stat;if(i>this.tmin&&i>this.freq){let s=this.slot,a=this.last;for(var r=0;r<s&&e[r]!=t;++r)if(r==a){r=-1;break}if(r>=0)h[r]=i;else{for(var n=this.tmin,l=0;l<s&&!(h[l]<=n);++l);e[l]=t,h[l]=i,this.tmin=this.lowest(h)}i>this.tmax&&(this.tmax=i)}}winsum(t,i=1){let s=this.invalid;if(t<this.clip||t>this.span||s(t)||s(i))return;if((i=this.bits[t]+i)>this.high)return;this.bits[t]=i;let e=this.rank,h=this.stat;if(i>this.tmin&&i>this.freq){for(var r,n,l=this.slot,a=0;a<l&&!(r>=0&&n>=0);++a)null==r&&e[a]==t&&(r=a),null==n&&h[a]<=i&&(n=a);if(null==n)return;if(r>=0){if(n>r)return;e.copyWithin(n+1,n,r),h.copyWithin(n+1,n,r),e[n]=t,h[n]=i}else e.copyWithin(n+1,n),h.copyWithin(n+1,n),e[n]=t,h[n]=i,this.tmin=h[this.last]??0;this.tmax=h[0]??0}}unique(...t){"object"==typeof t[0]&&t[0].length&&(t=t[0]);let i=8*Math.ceil(.125*t.length);for(var s=0;s<i-7;s+=8)this.add(t[s]),this.add(t[s+1]),this.add(t[s+2]),this.add(t[s+3]),this.add(t[s+4]),this.add(t[s+5]),this.add(t[s+6]),this.add(t[s+7]);return this}lowest(t,i=1/0){let s=t.length;for(let e=0;e<s;++e){let s=t[e];s<i&&(i=s)}return i}batch(...t){let i,s;"object"==typeof t[0]&&t[0].length&&"object"==typeof t[1]&&t[1].length?(i=t[1],t=t[0],s=i.length):"object"==typeof t[0]&&t[0].length&&(t=t[0]);let e=t.length;if(i)for(var h=0;h<e;h+=1){let e=t[h];this.sum(e,i[h%s])}else for(h=0;h<e;h+=1){let i=t[h];this.sum(i)}return this}clear(t){this.bits.fill(0),!0===t?(this.rank.fill(0),this.stat.fill(0)):t>0&&(this.slot=Math.min(t,64),this.last=t-1,this.rank=new this.default.Rank(t),this.stat=new this.default.Pool(t)),this.tmin=this.freq,this.tmax=0}add(t,i=1){let s=this.invalid;t<this.clip||t>this.span||s(t)||s(i)||i>this.high||(this.bits[t]=i)}get(t){return this.bits[t]}has(t){return!(t<this.clip||t>this.span)&&!!this.bits[t]}put(t,i=1){this.bits[t]=i}sum(){}top(t=this.slot){t>this.slot&&(t=this.slot);let i=new Array(t),s=this.rank,e=this.stat;for(var h=0;h<t;h+=1)i[h]=[s[h],e[h]];return i}topK(t=this.slot){return this.rank.slice(0,t)}topV(t=this.slot){return this.stat.slice(0,t)}keys(t){let i=this.bits,s=t??this.bits.length,e=new this.default.Rank(s),h=0;for(var r=0;r<s;r+=1){i[r]&&(e[h++]=r)}return e.subarray(0,h)}delete(t){let i=this.invalid;t<this.clip||t>this.span||i(t)||(this.bits[t]=0)}derank(t){let i=this.invalid;if(t<this.clip||t>this.span||i(t))return;this.bits[t]=0,this.tmin=0;let s=this.slot,e=this.rank,h=this.stat;for(var r=-1;r<s;++r)if(e[r]==t){e[r]=0,h[r]=0;break}if(r>=0&&"winsum"==this.default.mode){let t=this.last;e.copyWithin(r,r+1),h.copyWithin(r,r+1),e[t]=0,h[t]=0,this.tmin=h[t-1]}}values(t){let i=this.bits,s=t??this.bits.length,e=new this.default.Pool(s),h=0;for(var r=0;r<s;r+=1){let t=i[r];t&&(e[h++]=t)}return e.subarray(0,h)}sorted(t){let i=this.bits,s=t??this.bits.length,e=0;for(var h=0;h<s;h+=1)e+=i[h];let r=new this.default.Rank(e),n=0;for(h=0;h<s;h+=1){let t=i[h];if(0!==t)for(let i=0;i<t;i+=1)r[n++]=h}return r}resize(t){if(!(t>=0&&t<=64))throw new Error("Set window size between 0 and 64 inclusive.");{let i=new this.default.Rank(t),s=new this.default.Pool(t),e=Math.min(this.slot,t),h=this.rank,r=this.stat;for(let t=0;t<e;++t)i[t]=h[t],s[t]=r[t];this.rank=i,this.stat=s,this.slot=t}}entries(t){let i=this.bits,s=t??this.bits.length,e=new Array(this.span),h=0;for(var r=0;r<s;r+=1){let t=i[r];t>this.freq&&(e[h++]=[r,t])}return e.slice(0,h)}expects(t){switch(!0){case t<256:return[Uint8Array,1];case t<65536:return[Uint16Array,2];case t<2**32:return[Uint32Array,4];default:throw Error("Expected count out of range")}}invalid(t){return(0^(t>>>=1))!==t}default(){}}export{t as default};
